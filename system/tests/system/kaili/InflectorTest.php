<?php

namespace Kaili;

require_once dirname(__FILE__).'/../../../kaili/inflector.php';

/**
 * Test class for Inflector.
 * Generated by PHPUnit on 2011-10-25 at 21:22:04.
 */
class InflectorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    /**
     * Test for Inflector::stringify()
     * Test this method with a series of not stringified strings and returns 
     * the correspondent stringify version, with various separators (star *, dollar $, whitespace ' ').
     * @test
     */
    public function test_stringify()
    {
        $input = array(
            'This string is a test',
            'This*string*is*a*test',
            'This-string-is-a-test',
            'This*string-is/a\test',
            'This * string/(*is"$a+_ test',
        );
        $output_star = 'this*string*is*a*test';
        $output_dollar = 'this$string$is$a$test';
        $output_whitespace = 'this string is a test';
        
        foreach($input as $i){
            $this->assertEquals($output_star, Inflector::stringify($i, '*', true));
        }
        
        foreach($input as $i){
            $this->assertEquals($output_dollar, Inflector::stringify($i, '$', true));
        }
        
        foreach($input as $i){
            $this->assertEquals($output_whitespace, Inflector::stringify($i, ' ', true));
        }
    }
    
    /**
     * Test for Inflector::stringify()
     * Test this method with a series of not stringified strings and returns 
     * the correspondent stringify version, with various separators (star *, dollar $, whitespace ' ')
     * but not in lower case.
     * @test
     */
    public function test_stringify_not_lower_case()
    {
        $input = array(
            'This string is a Test',
            'This*string*is*a*Test',
            'This-string-is-a-Test',
            'This*string-is/a\Test',
            'This * string/(*is"$a+_ Test',
        );
        $output_star = 'This*string*is*a*Test';
        $output_dollar = 'This$string$is$a$Test';
        $output_whitespace = 'This string is a Test';
        
        foreach($input as $i){
            $this->assertEquals($output_star, Inflector::stringify($i, '*', false));
        }
        
        foreach($input as $i){
            $this->assertEquals($output_dollar, Inflector::stringify($i, '$', false));
        }
        
        foreach($input as $i){
            $this->assertEquals($output_whitespace, Inflector::stringify($i, ' ', false));
        }
    }


    /**
     * Test for Inflector::underscore()
     * Test this method with a series of not underscored strings and returns 
     * the correspondent underscored version.
     * @test
     */
    public function test_underscore()
    {
        $input = array(
            'This string is a test',
            'This*string*is*a*test',
            'This-string-is-a-test',
            'This*string-is/a\test',
            'This * string/(*is"$a+_ test',
        );
        $output = 'this_string_is_a_test';
        foreach($input as $i){
            $this->assertEquals($output, Inflector::underscore($i));
        }
    }

    /**
     * Test for Inflector::hyphenate()
     * Test this method with a series of not hyphenated strings and returns 
     * the correspondent hyphenated version.
     * @test
     */
    public function test_hyphenate()
    {
        $input = array(
            'This string is a test',
            'This*string*is*a*test',
            'This-string-is-a-test',
            'This*string-is/a\test',
            'This * string/(*is"$a+_ test',
        );
        $output = 'this-string-is-a-test';
        foreach($input as $i){
            $this->assertEquals($output, Inflector::hyphenate($i));
        }
    }

    /**
     * Test for Inflector::camelcase()
     * Test this method with a series of not camelcased strings and returns 
     * the correspondent camelcased version.
     * @test
     */
    public function test_camelcase()
    {
        $input = array(
            'this string is a test',
            'this*string*is*a*test',
            'this-string-is-a-test',
            'this*string-is/a\test',
            'this * string/(*is"$a+_ test',
        );
        $output = 'thisStringIsATest';
        foreach($input as $i){
            $this->assertEquals($output, Inflector::camelcase($i, false));
        }
    }
    
    /**
     * Test for Inflector::camelcase()
     * Test this method with a series of not camelcased strings and returns 
     * the correspondent camelcased version, with uppercased first letter.
     * @test
     */
    public function test_camelcase_with_first_upper()
    {
        $input = array(
            'this string is a test',
            'this*string*is*a*test',
            'this-string-is-a-test',
            'this*string-is/a\test',
            'this * string/(*is"$a+_ test',
        );
        $output = 'ThisStringIsATest';
        foreach($input as $i){
            $this->assertEquals($output, Inflector::camelcase($i, true));
        }
    }

    
    /**
     * Test for Inflector::singular()
     * Test this method with plural words ending in -s
     * @test
     */
    public function test_singular()
    {
        $input = array('colonies','','buses','kisses','peaches','buzzes','dishes','boxes');
        $output = array('colony','','bus','kiss','peach','buzz','dish','box');
        foreach($input as $i=>$word){        
            $this->assertEquals($output[$i], Inflector::singular($word));
        };
    }

    /**
     * @todo Implement testPlural().
     */
    public function test_plural()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
