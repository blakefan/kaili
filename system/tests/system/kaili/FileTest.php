<?php

namespace Kaili;

require_once dirname(__FILE__).'/../../../kaili/file.php';

/**
 * Test class for File.
 * Generated by PHPUnit on 2011-10-16 at 20:05:25.
 */
class FileTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var File
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $test_files = array(
            ROOT.DS.'test.txt',
            ROOT.DS.'test_new.txt',
            ROOT.DS.'test.tx',
            ROOT.DS.'test'
        );
        foreach($test_files as $f){
            file_exists($f) and unlink($f);
        }
    }

    /**
     * Test for File::factory()
     * @test
     */
    public function test_factory()
    {
        $object = File::factory(ROOT.DS.'index.php');
        $this->assertEquals($object->get_path(), ROOT.DS.'index.php');
    }
    
    /**
     * Test for File::factory()
     * The file doesn't exist.
     * Throws Kaili\Exception because the provided file doesn't exist.
     * @test
     * @expectedException \Kaili\FileException
     */
    public function test_factory_not_exist()
    {
        File::factory(ROOT.DS.'test.txt');
    }
    
    /**
     * Test for File::create()
     * @test
     */
    public function test_create()
    {
        $object = File::create(ROOT.DS.'test.txt');
        $this->assertEquals($object->get_path(), ROOT.DS.'test.txt');
    }
    
    /**
     * Test for File::create()
     * The file already exist.
     * Throws Exception because provided path is an already existent file
     * @test
     * @expectedException \Kaili\FileException
     */
    public function test_create_exists()
    {
        File::create(ROOT.DS.'index.php');
    }

    /**
     * Test for File::rename()
     * Create a new file named test.txt and renames it as test_new.txt.
     * At the end of the test, remove the created file.
     * @test
     */
    public function test_rename()
    {
        $object = File::create(ROOT.DS.'test.txt');
        $object->rename('test_new.txt');
        $this->assertEquals($object->get_base_name(), 'test_new.txt');
    }
    
    /**
     * Test for File::rename()
     * Create a new file named test.txt and renames it with the same name.
     * At the end of the test, remove the created file.
     * @test
     */
    public function test_rename_same_name()
    {
        $object = File::create(ROOT.DS.'test.txt');
        $object->rename('test.txt');
        $this->assertEquals($object->get_base_name(), 'test.txt');
    }
    
    /**
     * Test for File::rename()
     * Create a new file named test.txt and renames it changing extension to 'tx'.
     * At the end of the test, remove the created file.
     * @test
     */
    public function test_rename_ext()
    {
        $object = File::create(ROOT.DS.'test.txt');
        $object->rename('test.tx');
        $this->assertEquals($object->get_name(), 'test');
        $this->assertEquals($object->get_extension(), 'tx');
    }
    
    /**
     * Test for File::rename()
     * Create a new file named test.txt and renames it without extension.
     * At the end of the test, remove the created file.
     * @test
     */
    public function test_rename_no_ext()
    {
        $object = File::create(ROOT.DS.'test.txt');
        $object->rename('test');
        $this->assertEquals($object->get_name(), 'test');
        $this->assertEquals($object->get_extension(), '');
    }

    /**
     * @todo Implement testMove().
     */
    public function testMove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRead().
     */
    public function testRead()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testWrite().
     */
    public function testWrite()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAppend().
     */
    public function testAppend()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_path().
     */
    public function testGet_path()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_base_name().
     */
    public function testGet_base_name()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_dir_name().
     */
    public function testGet_dir_name()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_name().
     */
    public function testGet_name()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_ext().
     */
    public function testGet_ext()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_mime().
     */
    public function testGet_mime()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_size().
     */
    public function testGet_size()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_last_access().
     */
    public function testGet_last_access()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet_last_modification().
     */
    public function testGet_last_modification()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__toString().
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
